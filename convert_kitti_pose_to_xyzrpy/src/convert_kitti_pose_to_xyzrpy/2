// C/C++ File
// AUTHOR: siyuan.yu(siyuan.yu01@hobot.cc)
// FILE:     main.cc
// ROLE:     TODO (some explanation)
// CREATED:  2018-07-18 19:11:40
// MODIFIED: 2018-07-19 13:52:05
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>

#include <tf/tf.h>

#include <Eigen/Eigen>

using namespace std;
using namespace Eigen;

int main(int argc, char **argv) {
	if (argc < 5) {
		cout << "usage: rosrun convert_kitti_pose_to_xyzrpy "
			<< "convert_kitti_pose_to_xyzrpy lidar_pose_stamp_file "
			<< "lidar_pose_file calib_file output_xyzrpy_file\n";
		return -1;
	}
	ifstream ifs;
	//load pose stamp
	ifs.open(argv[1]);
	vector<double> pose_time_vec;
	double time_temp = 0;
	while (ifs >> time_temp) {
		pose_time_vec.push_back(time_temp);
	}

	if (pose_time_vec.size() <= 0) {
		cerr << "Load " <<  argv[1] << "failed!\n";
	}
	cout << "pose stamp size: " << pose_time_vec.size() << "\n";
	ifs.close();


	//load lidar to camera transform
	Matrix4d  camera_to_lidar = Matrix4d::Identity();
	ifs.open(argv[3]);
	for (auto i = 0; i < 5; i++) {
		string str;
		getline(ifs, str);
		if (i == 4) {
			stringstream ss(str);
			string temp;
			ss >> temp;
			for (auto row = 0; row < 3; row++)
				for (auto col = 0; col < 4; col++) {
					ss >> camera_to_lidar(row, col);
				}
		}
	}
	ifs.close();

	cout << "camera_to_lidar:\n" << camera_to_lidar << "\n";
	double roll = 0, pitch = 0, yaw = 0;
	//Quaterniond quat(camera_to_lidar.block<3, 3>(0, 0));
	//tf::Matrix3x3(tf::Quaternion(
				//quat.x(),
				//quat.y(),
				//quat.z(),
				//quat.w()
				//)).getRPY(roll, pitch, yaw);

	//auto rpy = camera_to_lidar.block<3, 3>(0, 0).eulerAngles(2, 1, 0);
	//roll = rpy(2);
	//pitch = rpy(1);
	//yaw = rpy(0);

	cout << "camera_to_lidar(xyz, rpy): " << " "
		<< camera_to_lidar(0, 3) << " " << camera_to_lidar(1, 3) << " " 
		<< camera_to_lidar(2, 3) << " "
		<< roll << " " << pitch << " " << yaw << "\n";

	ifs.open(argv[2]);
	//output time xyz rpy file
	ofstream ofs;
	ofs.open(argv[4]);
	//3x3 rotation
	double xx = 0, xy = 0, xz = 0; 
	double yx = 0, yy = 0, yz = 0; 
	double zx = 0, zy = 0, zz = 0; 

	//translation
	double x = 0 , y = 0, z = 0;

	size_t i = 0;
	Matrix4d cam = Matrix4d::Identity();
	while(ifs >> 
			cam(0, 0) >> cam(0, 1) >> cam(0, 2) >> cam(0, 3) >> 
			cam(1, 0) >> cam(1, 1) >> cam(1, 2) >> cam(1, 3) >> 
			cam(2, 0) >> cam(2, 1) >> cam(2, 2) >> cam(2, 3)
			) {
		Matrix4d lidar = cam * camera_to_lidar;
		double roll = 0, pitch = 0, yaw = 0;
		Quaterniond quat(lidar.block<3, 3>(0, 0));
		tf::Matrix3x3(tf::Quaternion(
					quat.x(),
					quat.y(),
					quat.z(),
					quat.w()
					)).getRPY(roll, pitch, yaw);

		ofs << pose_time_vec[i++] << " "
			<< lidar(0, 3) << " " << lidar(1, 3) << " " << lidar(2, 3) << " "
			<< roll << " " << pitch << " " << yaw << "\n";
	}
	ifs.close();
	ofs.close();
	cout << "Write " << i << " pose!\n";

	return 0;
}

